[circus]
umask = 022
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
statsd = %(circus_statsd)s
pidfile = %(here)s/var/run/circusd.pid
endpoint = ipc://%(here)s/var/run/circus_endpoint
pubsub_endpoint = ipc://%(here)s/var/run/circus_pubsub
stats_endpoint = ipc://%(here)s/var/run/circus_stats
logoutput = %(log_dir)s/circus.log

[plugin:statsd]
use = circus.plugins.statsd.FullStats
host = localhost
port = 8125
sample_rate = 1.0
application_name = %(instance_name)s

[watcher:celery]
working_dir = %(here)s
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
cmd = celery -A assembl.tasks -b %(CELERY_BROKER)s worker -E -l info -c %(CELERY_NUM_WORKERS)s
autostart = %(autostart_celery)s
startsecs = 2
stopasgroup = false
stopwaitsecs = 60
# If the process didn't kill it's children after 60 seconds, it's unlikely to
# ever reap them, so kill them all
killasgroup = true
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/celery.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/celery.err.log
stdout_stream.max_bytes = %(circus_log_size_celery_out)s
stdout_stream.backup_count = %(circus_log_backups_celery_out)s
stderr_stream.max_bytes = %(circus_log_size_celery_err)s
stderr_stream.backup_count = %(circus_log_backups_celery_err)s

[env:celery]
LC_CTYPE = %(lcctype)s

[watcher:flower]
working_dir = %(here)s
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
cmd = flower -A assembl.tasks -b %(CELERY_BROKER)s flower -p %(flower_port)s
autostart = %(autostart_flower)s
startsecs = 2
stopasgroup = false
stopwaitsecs = 60
# If the process didn't kill it's children after 60 seconds, it's unlikely to
# ever reap them, so kill them all
killasgroup = true
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/flower.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/flower.err.log
stdout_stream.max_bytes = %(circus_log_size_flower_out)s
stdout_stream.backup_count = %(circus_log_backups_flower_out)s
stderr_stream.max_bytes = %(circus_log_size_flower_err)s
stderr_stream.backup_count = %(circus_log_backups_flower_err)s

[env:flower]
LC_CTYPE = %(lcctype)s

[watcher:source_reader]
working_dir = %(here)s
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
cmd = python -m assembl.tasks.source_reader %(CONFIG_FILE)s
autostart = %(autostart_source_reader)s
startsecs = 2
stopasgroup = false
stopwaitsecs = 60
killasgroup = true
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/source_reader.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/source_reader.err.log
stdout_stream.max_bytes = %(circus_log_size_source_reader_out)s
stdout_stream.backup_count = %(circus_log_backups_source_reader_out)s
stderr_stream.max_bytes = %(circus_log_size_source_reader_err)s
stderr_stream.backup_count = %(circus_log_backups_source_reader_err)s

[env:source_reader]
LC_CTYPE = %(lcctype)s

[watcher:celery_notify_beat]
working_dir = %(here)s
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
cmd = celery -A assembl.tasks.notify -b %(CELERY_BROKER)s beat
autostart = %(autostart_celery_notify_beat)s
startsecs = 2
stopasgroup = false
stopwaitsecs = 60
# If the process didn't kill it's children after 60 seconds, it's unlikely to
# ever reap them, so kill them all
killasgroup = true
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/celery_notify_beat.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/celery_notify_beat.err.log
stdout_stream.max_bytes = %(circus_log_size_celery_notify_beat_out)s
stdout_stream.backup_count = %(circus_log_backups_celery_notify_beat_out)s
stderr_stream.max_bytes = %(circus_log_size_celery_notify_beat_err)s
stderr_stream.backup_count = %(circus_log_backups_celery_notify_beat_err)s

[watcher:changes_router]
working_dir = %(here)s
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
cmd = python %(code_root)s/assembl/tasks/changes_router.py %(CONFIG_FILE)s
autostart = %(autostart_changes_router)s
stopasgroup = false
stopwaitsecs = 5
startretries = 3
startsecs = 5
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/changes_router.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/changes_router.err.log
stdout_stream.max_bytes = %(circus_log_size_changes_router_out)s
stdout_stream.backup_count = %(circus_log_backups_changes_router_out)s
stderr_stream.max_bytes = %(circus_log_size_changes_router_err)s
stderr_stream.backup_count = %(circus_log_backups_changes_router_err)s

[env:changes_router]
LC_CTYPE = %(lcctype)s

[watcher:oembed]
working_dir = %(here)s
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
cmd = python %(code_root)s/assembl/tasks/oembed.py %(CONFIG_FILE)s
autostart = %(autostart_oembed)s
respawn = false
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/oembed.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/oembed.err.log
stdout_stream.max_bytes = %(circus_log_size_oembed_out)s
stdout_stream.backup_count = %(circus_log_backups_oembed_out)s
stderr_stream.max_bytes = %(circus_log_size_oembed_err)s
stderr_stream.backup_count = %(circus_log_backups_oembed_err)s

[env:oembed]
LC_CTYPE = %(lcctype)s


[watcher:pserve]
working_dir = %(here)s
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
cmd = pserve --reload %(CONFIG_FILE)s
autostart = %(autostart_pserve)s
respawn = false
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/pserve.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/pserve.err.log
stdout_stream.max_bytes = %(circus_log_size_pserve_out)s
stdout_stream.backup_count = %(circus_log_backups_pserve_out)s
stderr_stream.max_bytes = %(circus_log_size_pserve_err)s
stderr_stream.backup_count = %(circus_log_backups_pserve_err)s

[env:pserve]
LC_CTYPE = %(lcctype)s

[watcher:chaussette]
working_dir = %(here)s
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
cmd = chaussette --fd $(circus.sockets.web) --backend waitress paste:%(CONFIG_FILE)s
autostart = %(autostart_chaussette)s
respawn = false
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/chaussette.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/chaussette.err.log
stdout_stream.max_bytes = %(circus_log_size_chaussette_out)s
stdout_stream.backup_count = %(circus_log_backups_chaussette_out)s
stderr_stream.max_bytes = %(circus_log_size_chaussette_err)s
stderr_stream.backup_count = %(circus_log_backups_chaussette_err)s

[env:chaussette]
LC_CTYPE = %(lcctype)s

[socket:web]
host = 127.0.0.1
port = %(chaussette_port)d

[watcher:webpack]
working_dir = %(here)s/assembl/static
virtualenv = %(VIRTUAL_ENV)s
copy_env = True
cmd = %(here)s/assembl/static/node_modules/.bin/webpack serve --config webpack.dev.config.js
autostart = %(autostart_webpack)s
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/webpack.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/webpack.err.log
stdout_stream.max_bytes = %(circus_log_size_webpack_out)s
stdout_stream.backup_count = %(circus_log_backups_webpack_out)s
stderr_stream.max_bytes = %(circus_log_size_webpack_err)s
stderr_stream.backup_count = %(circus_log_backups_webpack_err)s

[env:webpack]
ASSEMBL_URL = %(ASSEMBL_URL)s
WEBPACK_URL = %(WEBPACK_URL)s
LC_CTYPE = %(lcctype)s

[watcher:uwsgi]
working_dir = %(here)s
cmd = uwsgi --die-on-term --ini %(CONFIG_FILE)s
umask=002
autostart = %(autostart_uwsgi)s
#user=www-data
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/uwsgi.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/uwsgi.err.log
stdout_stream.max_bytes = %(circus_log_size_uwsgi_out)s
stdout_stream.backup_count = %(circus_log_backups_uwsgi_out)s
stderr_stream.max_bytes = %(circus_log_size_uwsgi_err)s
stderr_stream.backup_count = %(circus_log_backups_uwsgi_err)s

[env:uwsgi]
LC_CTYPE = %(lcctype)s
PATH = %(VIRTUAL_ENV)s/bin:/usr/local/bin:/usr/bin

[watcher:maintenance_uwsgi]
working_dir = %(here)s
cmd = uwsgi --die-on-term --ini maintenance.ini
umask=002
autostart = false
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/uwsgi_m.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/uwsgi_m.err.log
stdout_stream.max_bytes = %(circus_log_size_maintenance_out)s
stdout_stream.backup_count = %(circus_log_backups_maintenance_out)s
stderr_stream.max_bytes = %(circus_log_size_maintenance_err)s
stderr_stream.backup_count = %(circus_log_backups_maintenance_err)s

[watcher:metrics]
working_dir = %(metrics_code_dir)s
cmd = %(metrics_cl)s -l %(metrics_code_dir)s/metrics-startup.lisp
copy_env = true
close_child_stdin = false
autostart = %(autostart_metrics)s
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/metrics.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/metrics.err.log
stdout_stream.max_bytes = %(circus_log_size_metrics_out)s
stdout_stream.backup_count = %(circus_log_backups_metrics_out)s
stderr_stream.max_bytes = %(circus_log_size_metrics_err)s
stderr_stream.backup_count = %(circus_log_backups_metrics_err)s

[env:metrics]
LC_CTYPE = %(lcctype)s

[watcher:metrics_py]
working_dir = %(metrics_code_dir)s
cmd = python %(metrics_code_dir)s/startup.py
virtualenv = %(VIRTUAL_ENV)s
copy_env = true
autostart = %(autostart_metrics)s
stdout_stream.class = FileStream
stdout_stream.filename = %(log_dir)s/metrics_py.log
stderr_stream.class = FileStream
stderr_stream.filename = %(log_dir)s/metrics_py.err.log
stdout_stream.max_bytes = %(circus_log_size_metrics_py_out)s
stdout_stream.backup_count = %(circus_log_backups_metrics_py_out)s
stderr_stream.max_bytes = %(circus_log_size_metrics_py_err)s
stderr_stream.backup_count = %(circus_log_backups_metrics_py_err)s

[env:metrics_py]
LC_CTYPE = %(lcctype)s
